{"ast":null,"code":"import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes, authRoutes, superadminRoutes } from \"../routes/allRoutes\";\nimport { LOCAL_STORAGE_SIGNIN_KEY } from '../App.constants';\nimport { ROLES } from '../App.constants';\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n\n    this.goBack = props => {\n      props.history.goBack();\n    };\n\n    this.fetchUser = () => {\n      // copySessionData = ({}, this.state.sessionData);\n      // copySessionData.userId = user.id;\n      // console.log(\"new user id\", { sessionData: copySessionData });\n      let user;\n\n      if (!localStorage.getItem('authUser')) {\n        user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n      } else user = localStorage.getItem('authUser');\n\n      if (user) {\n        user = JSON.parse(user); //   console.log(\"check access token\",user.access_token);\n        //   copySessionData.accessToken = user.access_token;\n        //   copySessionData.userId = user.id;\n        //   this.setState({ sessionData: copySessionData });\n        //   console.log(\"check access token\", copySessionData);\n        // console.log(\"check authuser from fetch :\", user);\n\n        this.setState({\n          sessionData: {\n            user: user,\n            accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        });\n        console.log(user);\n        return user;\n      }\n\n      return {};\n    };\n\n    this.signIn = ({\n      email,\n      password\n    }, props) => {\n      instance.post(`${process.env.REACT_APP_DATABASEURL}/auth/login`, {\n        email,\n        password\n      }).then(response => {\n        const user = response.data.data;\n        console.log(user);\n        console.log(\"check base url \", process.env.REACT_APP_DATABASEURL);\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            // accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        });\n        let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n\n        if (Authuser.subRole === \"Super-admin\") {\n          localStorage.setItem(\"users\", Authuser.subRole);\n        } else {\n          localStorage.setItem(\"users\", Authuser.Role.role);\n        }\n\n        localStorage.setItem(\"token\", Authuser.access_token);\n\n        if (Authuser.Role.role === 'Client') {\n          localStorage.setItem(\"User\", 'Client');\n          props.history.push(\"/dashboard\");\n        } else if (Authuser.subRole === 'Super-admin') {\n          localStorage.setItem(\"SuperAdmin\", 'SuperAdmin');\n          props.history.push(\"/admin-dashboard\");\n        } else if (Authuser.Role.role === 'Admin') {\n          localStorage.setItem(\"Admin\", 'Admin');\n          props.history.push(\"/admindashboard\");\n        }\n\n        if (Authuser.Role.role === 'Writer') {\n          localStorage.setItem(\"Writer\", 'Writer');\n\n          if (res.data.data.score) {\n            props.history.push(\"/wdashboard\");\n          } else {\n            props.history.push(\"/wexam\");\n          }\n        } //check if writer has a score and redirect\n        // async function fetchData(){\n        //   try {\n        //     const res = await instance\n        //       .get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n        //         headers: {\n        //           Authorization: `Bearer ${Authuser.access_token}`,\n        //         },\n        //       })\n        //       console.log(res.data.data)\n        //       if (Authuser.Role.role === 'Writer') {\n        //         localStorage.setItem(\"Writer\", 'Writer')\n        //         if (res.data.data.score) {\n        //           props.history.push(\"/wdashboard\");\n        //         }\n        //         else {\n        //           props.history.push(\"/wexam\");\n        //         }\n        //       }\n        //   } catch (e) {\n        //     console.log(e);\n        //   }\n        //   }\n        //   fetchData();\n\n\n        return {};\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.verifyUser = (id, props) => {\n      console.log(\"my id first :\", id);\n      instance.get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`).then(response => {\n        const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n        return true;\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.registerUser = ({\n      firstname,\n      lastname,\n      phone,\n      email,\n      country,\n      password,\n      role\n    }) => {\n      return new Promise((resolve, reject) => {\n        console.log({\n          firstname,\n          lastname,\n          phone,\n          email,\n          country,\n          password,\n          role\n        });\n\n        const filterUserId = resData => {\n          var str = resData;\n          var res = str.replace(/\\D/g, \"\");\n          return res;\n        };\n\n        instance.post(`${process.env.REACT_APP_DATABASEURL}auth/signup`, {\n          firstname: firstname,\n          lastname: lastname,\n          phone: phone,\n          email: email,\n          country: country,\n          password: password,\n          role: role\n        }).then(response => {\n          const user = response.data;\n          const verifyId = filterUserId(user.data);\n          this.setState({\n            sessionData: {\n              register: verifyId\n            }\n          });\n          console.log(verifyId);\n          console.log(\"register response\", user);\n          console.log(resolve(response));\n          resolve(response);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.updateClientProfile = ({\n      firstName,\n      lastName,\n      phone,\n      email,\n      country\n    }, userId) => {\n      return new Promise((resolve, reject) => {\n        console.log(\"token preview\", firstName); // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n\n        const token = localStorage.getItem(\"token\");\n        instance.put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`, {\n          firstname: firstName,\n          lastname: lastName,\n          phone: phone,\n          email: email,\n          country: country\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(data => {\n          console.log(data);\n          console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n          let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n          x = JSON.parse(x);\n          console.log(x);\n          x.first_name = firstName;\n          x.last_name = lastName;\n          localStorage.setItem('authUser', JSON.stringify(x));\n          console.log(\"hitting updateclientProfile\");\n          console.log(data);\n          this.setState({\n            updatedProfile: !this.state.updatedProfile\n          });\n          resolve(data);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register: null\n      }\n    };\n  }\n\n  ispermission(role = [...ROLES]) {\n    var _this$state, _this$state$sessionDa, _this$state$sessionDa2, _this$state$sessionDa3, _this$state2, _this$state2$sessionD, _this$state2$sessionD2, _this$state2$sessionD3;\n\n    console.log((_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$sessionDa = _this$state.sessionData) === null || _this$state$sessionDa === void 0 ? void 0 : (_this$state$sessionDa2 = _this$state$sessionDa.user) === null || _this$state$sessionDa2 === void 0 ? void 0 : (_this$state$sessionDa3 = _this$state$sessionDa2.Role) === null || _this$state$sessionDa3 === void 0 ? void 0 : _this$state$sessionDa3.role);\n    const adminRole = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$sessionD = _this$state2.sessionData) === null || _this$state2$sessionD === void 0 ? void 0 : (_this$state2$sessionD2 = _this$state2$sessionD.user) === null || _this$state2$sessionD2 === void 0 ? void 0 : (_this$state2$sessionD3 = _this$state2$sessionD2.Role) === null || _this$state2$sessionD3 === void 0 ? void 0 : _this$state2$sessionD3.role;\n    const isPermitted = role.filter(item => {\n      return item === adminRole;\n    });\n    return isPermitted.length > 0 ? true : false;\n  }\n\n}\n\nexport { UserContainer }; // let user,copySessionData;\n// console.log(\"check id \", this.state.userId);\n// user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n// user = JSON.parse(user);\n// copySessionData = ({}, this.state.sessionData);\n// copySessionData.userId = user.id;\n// this.setState({ sessionData: copySessionData });","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/containers/UserContainer.js"],"names":["Container","instance","CONSTANTS","userRoutes","authRoutes","superadminRoutes","LOCAL_STORAGE_SIGNIN_KEY","ROLES","UserContainer","constructor","goBack","props","history","fetchUser","user","localStorage","getItem","JSON","parse","setState","sessionData","accessToken","access_token","userId","id","console","log","signIn","email","password","post","process","env","REACT_APP_DATABASEURL","then","response","data","setItem","stringify","Authuser","subRole","Role","role","push","res","score","catch","e","verifyUser","get","resStatus","status","registerUser","firstname","lastname","phone","country","Promise","resolve","reject","filterUserId","resData","str","replace","verifyId","register","updateClientProfile","firstName","lastName","token","put","headers","Authorization","x","first_name","last_name","updatedProfile","state","ispermission","adminRole","isPermitted","filter","item","length"],"mappings":"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","sourcesContent":["import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes , authRoutes,  superadminRoutes} from \"../routes/allRoutes\";\nimport {LOCAL_STORAGE_SIGNIN_KEY} from '../App.constants'\nimport {ROLES} from '../App.constants'\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register:null,\n      },\n    };\n  }\n\n  ispermission(role = [...ROLES]){\n    console.log(this.state?.sessionData?.user?.Role?.role)\n    const adminRole = this.state?.sessionData?.user?.Role?.role;\n\n    const isPermitted = role.filter(item => {\n      return item === adminRole\n    })\n\n    return isPermitted.length > 0 ? true : false;\n\n  }\n\n\n\n  goBack = (props) => {\n    props.history.goBack();\n  };\n\n  fetchUser = () => {\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // console.log(\"new user id\", { sessionData: copySessionData });\n    let user\n\n    if(!localStorage.getItem('authUser')){\n      user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY)\n    } else user = localStorage.getItem('authUser')\n    if (user) {\n\n      user = JSON.parse(user);\n      //   console.log(\"check access token\",user.access_token);\n      //   copySessionData.accessToken = user.access_token;\n      //   copySessionData.userId = user.id;\n\n      //   this.setState({ sessionData: copySessionData });\n      //   console.log(\"check access token\", copySessionData);\n\n      // console.log(\"check authuser from fetch :\", user);\n      this.setState({\n        sessionData: {\n          user: user,\n          accessToken: `${user.access_token}`,\n          userId: user.id,\n        },})\n      console.log(user)\n      return user;\n    }\n    return {};\n  };\n\n\n  signIn = ({ email, password }, props) => {\n    instance\n      .post(`${process.env.REACT_APP_DATABASEURL}/auth/login`, { email, password })\n      .then((response) => {\n        const user = response.data.data;\n        console.log(user);\n\n        console.log(\"check base url \",process.env.REACT_APP_DATABASEURL)\n\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            // accessToken: `${user.access_token}`,\n            userId: user.id,\n          },\n\n        });\n        let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY))\n        if (Authuser.subRole === \"Super-admin\") {\n          localStorage.setItem(\"users\", Authuser.subRole)\n        } else {\n          localStorage.setItem(\"users\", Authuser.Role.role)\n        }\n        localStorage.setItem(\"token\", Authuser.access_token)\n\n\n\n\n        if (Authuser.Role.role === 'Client') {\n\n          localStorage.setItem(\"User\", 'Client')\n          props.history.push(\"/dashboard\");\n        }\n        else if (Authuser.subRole === 'Super-admin') {\n\n          localStorage.setItem(\"SuperAdmin\", 'SuperAdmin')\n          props.history.push(\"/admin-dashboard\");\n        } else if (Authuser.Role.role === 'Admin') {\n          localStorage.setItem(\"Admin\", 'Admin')\n          props.history.push(\"/admindashboard\");\n        }\n\n               if (Authuser.Role.role === 'Writer') {\n\n                  localStorage.setItem(\"Writer\", 'Writer')\n                  if (res.data.data.score) {\n                    props.history.push(\"/wdashboard\");\n                  }\n                  else {\n                    props.history.push(\"/wexam\");\n                  }\n                }\n\n        //check if writer has a score and redirect\n          // async function fetchData(){\n          //   try {\n          //     const res = await instance\n          //       .get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n          //         headers: {\n          //           Authorization: `Bearer ${Authuser.access_token}`,\n          //         },\n          //       })\n\n          //       console.log(res.data.data)\n\n          //       if (Authuser.Role.role === 'Writer') {\n\n          //         localStorage.setItem(\"Writer\", 'Writer')\n          //         if (res.data.data.score) {\n          //           props.history.push(\"/wdashboard\");\n          //         }\n          //         else {\n          //           props.history.push(\"/wexam\");\n          //         }\n          //       }\n          //   } catch (e) {\n          //     console.log(e);\n          //   }\n          //   }\n          //   fetchData();\n\n\n        return {};\n\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n  };\n\n  // /auth/verify/{id}\n  verifyUser = (id,props) => {\n    console.log(\"my id first :\", id)\n    instance\n    .get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`)\n    .then((response) => {\n      const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n\n      return true;\n\n    })\n    .catch((e) => {\n      console.log(e);\n\n    });\n  }\n\n\n  registerUser = ({firstname, lastname,\n    phone,\n    email,\n    country,\n    password,\n    role}) => {\n    return new Promise((resolve, reject) => {\n\t\tconsole.log({firstname, lastname,\n      phone,\n      email,\n      country,\n      password,\n      role})\n\t\tconst filterUserId = (resData) => {\n\t\t  var str = resData;\n\t\t  var res = str.replace(/\\D/g, \"\");\n\t\t  return res;\n\t\t}\n\n\t\tinstance\n\t\t.post(`${process.env.REACT_APP_DATABASEURL}auth/signup`,\n    {firstname: firstname, lastname: lastname,\n    phone:phone,\n    email:email,\n    country:country,\n    password:password,\n    role:role})\n\t\t.then((response) => {\n\t\t  const user = response.data;\n\t\t const verifyId =  filterUserId(user.data);\n\t\t  this.setState({\n\t\t\tsessionData: {\n\t\t\t  register:verifyId\n\t\t\t},});\n\t\t\tconsole.log(verifyId);\n\t\t  console.log(\"register response\",user)\n      console.log(resolve(response));\n\t\t  resolve(response);\n\n\t\t})\n\t\t.catch((e) => {\n\t\t  console.log(e);\n\t\t  reject(e);\n\t\t});\n\t} )\n  }\n\n\n  updateClientProfile = ({ firstName, lastName, phone, email, country },userId\n\n  ) =>  {\n    return new Promise((resolve, reject) => {\n    console.log(\"token preview\",firstName )\n\n    // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n    const token = localStorage.getItem(\"token\")\n    instance\n      .put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`,\n        {\n          firstname : firstName,\n          lastname : lastName,\n          phone : phone,\n          email : email,\n          country : country\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((data) => {\n        console.log(data);\n        console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n        let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n        x = JSON.parse(x);\n        console.log(x);\n        x.first_name =firstName;\n        x.last_name = lastName;\n\n         localStorage.setItem(\n            'authUser',\n            JSON.stringify(x)\n          );\n        console.log(\"hitting updateclientProfile\");\n        console.log(data);\n        this.setState({\n          updatedProfile: !this.state.updatedProfile\n        })\n        resolve(data);\n      })\n      .catch((e) => {\n        console.log(e);\n        reject(e);\n      });\n  })}\n\n}\n\nexport { UserContainer };\n\n\n\n    // let user,copySessionData;\n    // console.log(\"check id \", this.state.userId);\n\n    // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n    // user = JSON.parse(user);\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // this.setState({ sessionData: copySessionData });"]},"metadata":{},"sourceType":"module"}