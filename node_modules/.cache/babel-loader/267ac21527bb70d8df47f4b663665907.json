{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mac/writingPlatform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(forgetUser),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchUserPasswordForget),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(forgetPasswordSaga);import{takeEvery,fork,put,all,call}from\"redux-saga/effects\";// Login Redux States\nimport{FORGET_PASSWORD}from\"./actionTypes\";import{userForgetPasswordSuccess,userForgetPasswordError}from\"./actions\";//Include Both Helper File with needed methods\nimport{getFirebaseBackend}from\"../../../helpers/firebase_helper\";import{postFakeForgetPwd,postJwtForgetPwd}from'../../../helpers/fakebackend_helper';var fireBaseBackend=getFirebaseBackend();//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction forgetUser(_ref){var _ref$payload,user,history,response,_response,_response2;return _regeneratorRuntime.wrap(function forgetUser$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$payload=_ref.payload,user=_ref$payload.user,history=_ref$payload.history;_context.prev=1;if(!(process.env.REACT_APP_DEFAULTAUTH===\"firebase\")){_context.next=11;break;}_context.next=5;return call(fireBaseBackend.forgetPassword,user.email);case 5:response=_context.sent;if(!response){_context.next=9;break;}_context.next=9;return put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));case 9:_context.next=26;break;case 11:if(!(process.env.REACT_APP_DEFAULTAUTH===\"jwt\")){_context.next=20;break;}_context.next=14;return call(postJwtForgetPwd,'/jwt-forget-pwd',{email:user.email});case 14:_response=_context.sent;if(!_response){_context.next=18;break;}_context.next=18;return put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));case 18:_context.next=26;break;case 20:_context.next=22;return call(postFakeForgetPwd,'/fake-forget-pwd',{email:user.email});case 22:_response2=_context.sent;if(!_response2){_context.next=26;break;}_context.next=26;return put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));case 26:_context.next=32;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](1);_context.next=32;return put(userForgetPasswordError(_context.t0));case 32:case\"end\":return _context.stop();}}},_marked,null,[[1,28]]);}export function watchUserPasswordForget(){return _regeneratorRuntime.wrap(function watchUserPasswordForget$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(FORGET_PASSWORD,forgetUser);case 2:case\"end\":return _context2.stop();}}},_marked2);}function forgetPasswordSaga(){return _regeneratorRuntime.wrap(function forgetPasswordSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchUserPasswordForget)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default forgetPasswordSaga;","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/store/auth/forgetpwd/saga.js"],"names":["forgetUser","watchUserPasswordForget","forgetPasswordSaga","takeEvery","fork","put","all","call","FORGET_PASSWORD","userForgetPasswordSuccess","userForgetPasswordError","getFirebaseBackend","postFakeForgetPwd","postJwtForgetPwd","fireBaseBackend","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","forgetPassword","email","response"],"mappings":"0LAcUA,U,iDAyCOC,uB,iDAIPC,kB,EA3DV,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,GAA1B,CAA+BC,GAA/B,CAAoCC,IAApC,KAAgD,oBAAhD,CAEA;AACA,OAASC,eAAT,KAAgC,eAAhC,CACA,OAASC,yBAAT,CAAoCC,uBAApC,KAAmE,WAAnE,CAEA;AACA,OAASC,kBAAT,KAAmC,kCAAnC,CACA,OAASC,iBAAT,CAA4BC,gBAA5B,KAAoD,qCAApD,CAGA,GAAMC,CAAAA,eAAe,CAAGH,kBAAkB,EAA1C,CAEA;AACA,QAAUX,CAAAA,UAAV,wMAAuBe,OAAvB,CAAkCC,IAAlC,cAAkCA,IAAlC,CAAwCC,OAAxC,cAAwCA,OAAxC,sBAEKC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,UAF3C,2CAI8B,MAAMb,CAAAA,IAAI,CAACO,eAAe,CAACO,cAAjB,CAAiCL,IAAI,CAACM,KAAtC,CAAV,CAJ9B,OAImBC,QAJnB,mBAKiBA,QALjB,yCAMc,MAAMlB,CAAAA,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT,CANd,2CAakBS,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,KAbxD,4CAe8B,MAAMb,CAAAA,IAAI,CAACM,gBAAD,CAAmB,iBAAnB,CAAsC,CAACS,KAAK,CAAEN,IAAI,CAACM,KAAb,CAAtC,CAAV,CAf9B,QAemBC,SAfnB,mBAgBkBA,SAhBlB,2CAiBc,MAAMlB,CAAAA,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT,CAjBd,wDA0B8B,MAAMF,CAAAA,IAAI,CAACK,iBAAD,CAAoB,kBAApB,CAAwC,CAACU,KAAK,CAAEN,IAAI,CAACM,KAAb,CAAxC,CAAV,CA1B9B,QA0BmBC,UA1BnB,mBA2BkBA,UA3BlB,2CA4Bc,MAAMlB,CAAAA,GAAG,CACPI,yBAAyB,CACvB,0DADuB,CADlB,CAAT,CA5Bd,0GAqCI,MAAMJ,CAAAA,GAAG,CAACK,uBAAuB,aAAxB,CAAT,CArCJ,qEAyCA,MAAO,SAAUT,CAAAA,uBAAV,uJACL,MAAME,CAAAA,SAAS,CAACK,eAAD,CAAkBR,UAAlB,CAAf,CADK,wDAIP,QAAUE,CAAAA,kBAAV,kJACE,MAAMI,CAAAA,GAAG,CAAC,CAACF,IAAI,CAACH,uBAAD,CAAL,CAAD,CAAT,CADF,wDAIA,cAAeC,CAAAA,kBAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { FORGET_PASSWORD } from \"./actionTypes\";\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeForgetPwd, postJwtForgetPwd } from '../../../helpers/fakebackend_helper';\n\n\nconst fireBaseBackend = getFirebaseBackend();\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser({ payload: { user, history } }) {\n  try {\n  if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\")\n          {\n             const response = yield call(fireBaseBackend.forgetPassword, user.email);\n             if (response) {\n              yield put(\n                userForgetPasswordSuccess(\n                  \"Reset link are sended to your mailbox, check there first\"\n                )\n              );\n            }\n          }\n          else if(process.env.REACT_APP_DEFAULTAUTH === \"jwt\")\n          {\n             const response = yield call(postJwtForgetPwd, '/jwt-forget-pwd', {email: user.email});\n              if (response) {\n              yield put(\n                userForgetPasswordSuccess(\n                  \"Reset link are sended to your mailbox, check there first\"\n                )\n              );\n            }\n          }\n          else\n          {\n             const response = yield call(postFakeForgetPwd, '/fake-forget-pwd', {email: user.email});\n              if (response) {\n              yield put(\n                userForgetPasswordSuccess(\n                  \"Reset link are sended to your mailbox, check there first\"\n                )\n              );\n            }\n\n          }\n  } catch (error) {\n    yield put(userForgetPasswordError(error));\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(FORGET_PASSWORD, forgetUser);\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget)]);\n}\n\nexport default forgetPasswordSaga;\n"]},"metadata":{},"sourceType":"module"}