{"ast":null,"code":"import _objectSpread from\"/Users/mac/writingPlatform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from'axios';import MockAdapter from'axios-mock-adapter';import accessToken from\"../jwt-token-access/accessToken\";var users=[{uid:1,username:'admin',role:'admin',password:'123456',email:'admin@themesbrand.com'}];var fakeBackend=function fakeBackend(){// This sets the mock adapter on the default instance\nvar mock=new MockAdapter(axios);mock.onPost('/post-fake-register').reply(function(config){var user=JSON.parse(config['data']);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost('/auth/login').reply(function(config){var user=JSON.parse(config['data']);console.log(user);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser['length']===1){resolve([200,validUser[0]]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost('/fake-forget-pwd').reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onPost('/post-jwt-register').reply(function(config){var user=JSON.parse(config['data']);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost('/post-jwt-login').reply(function(config){var user=JSON.parse(config['data']);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser['length']===1){// You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\nvar token=accessToken;// JWT AccessToken\nvar tokenObj={accessToken:token};// Token Obj\nvar validUserObj=_objectSpread(_objectSpread({},validUser[0]),tokenObj);// validUser Obj\nresolve([200,validUserObj]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost('/post-jwt-profile').reply(function(config){var user=JSON.parse(config['data']);var one=config.headers;var finalToken=one.Authorization;var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){// Verify Jwt token from header.Authorization \nif(finalToken===accessToken){if(validUser['length']===1){var objIndex;//Find index of specific object using findIndex method.    \nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}}else{reject([400,\"Invalid Token !!\"]);}});});});mock.onPost('/post-fake-profile').reply(function(config){var user=JSON.parse(config['data']);var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser['length']===1){var objIndex;//Find index of specific object using findIndex method.    \nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));console.log(localStorage.getItem(\"authUser\"));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}});});});mock.onPost('/jwt-forget-pwd').reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});};export default fakeBackend;","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","accessToken","users","uid","username","role","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","console","log","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","getItem"],"mappings":"gJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,oBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,CAEA,GAAIC,CAAAA,KAAK,CAAG,CACV,CAAEC,GAAG,CAAE,CAAP,CAAUC,QAAQ,CAAE,OAApB,CAA6BC,IAAI,CAAG,OAApC,CAA6CC,QAAQ,CAAE,QAAvD,CAAiEC,KAAK,CAAE,uBAAxE,CADU,CAAZ,CAIA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB;AACA,GAAIC,CAAAA,IAAI,CAAG,GAAIT,CAAAA,WAAJ,CAAgBD,KAAhB,CAAX,CAEAU,IAAI,CAACC,MAAL,CAAY,qBAAZ,EAAmCC,KAAnC,CAAyC,SAAUC,MAAV,CAAkB,CAEzD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CACAV,KAAK,CAACc,IAAN,CAAWH,IAAX,EAEA,MAAO,IAAII,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CC,UAAU,CAAC,UAAY,CACrBF,OAAO,CAAC,CAAC,GAAD,CAAML,IAAN,CAAD,CAAP,CACD,CAFS,CAAV,CAGD,CAJM,CAAP,CAKD,CAVD,EAYAJ,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,SAAUC,MAAV,CAAkB,CAEjD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CACAS,OAAO,CAACC,GAAR,CAAYT,IAAZ,EACA,GAAMU,CAAAA,SAAS,CAAGrB,KAAK,CAACsB,MAAN,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAAClB,KAAJ,GAAcM,IAAI,CAACN,KAAnB,EAA4BkB,GAAG,CAACnB,QAAJ,GAAiBO,IAAI,CAACP,QAAtD,EAAhB,CAAlB,CAEA,MAAO,IAAIW,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CC,UAAU,CAAC,UAAY,CACrB,GAAIG,SAAS,CAAC,QAAD,CAAT,GAAwB,CAA5B,CAA+B,CAC7BL,OAAO,CAAC,CAAC,GAAD,CAAMK,SAAS,CAAC,CAAD,CAAf,CAAD,CAAP,CACD,CAFD,IAEO,CACLJ,MAAM,CAAC,CAAC,GAAD,CAAM,+EAAN,CAAD,CAAN,CACD,CACF,CANS,CAAV,CAOD,CARM,CAAP,CASD,CAfD,EAiBAV,IAAI,CAACC,MAAL,CAAY,kBAAZ,EAAgCC,KAAhC,CAAsC,SAAUC,MAAV,CAAkB,CACvD;AAEA,MAAO,IAAIK,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC7CC,UAAU,CAAC,UAAY,CACnBF,OAAO,CAAC,CAAC,GAAD,CAAM,yCAAN,CAAD,CAAP,CACH,CAFS,CAAV,CAGD,CAJO,CAAP,CAMA,CATD,EAaAT,IAAI,CAACC,MAAL,CAAY,oBAAZ,EAAkCC,KAAlC,CAAwC,SAAUC,MAAV,CAAkB,CAExD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CACAV,KAAK,CAACc,IAAN,CAAWH,IAAX,EAEA,MAAO,IAAII,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CC,UAAU,CAAC,UAAY,CACrBF,OAAO,CAAC,CAAC,GAAD,CAAML,IAAN,CAAD,CAAP,CACD,CAFS,CAAV,CAGD,CAJM,CAAP,CAKD,CAVD,EAYAJ,IAAI,CAACC,MAAL,CAAY,iBAAZ,EAA+BC,KAA/B,CAAqC,SAAUC,MAAV,CAAkB,CAErD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CACA,GAAMW,CAAAA,SAAS,CAAGrB,KAAK,CAACsB,MAAN,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAAClB,KAAJ,GAAcM,IAAI,CAACN,KAAnB,EAA4BkB,GAAG,CAACnB,QAAJ,GAAiBO,IAAI,CAACP,QAAtD,EAAhB,CAAlB,CAEA,MAAO,IAAIW,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CC,UAAU,CAAC,UAAY,CACrB,GAAIG,SAAS,CAAC,QAAD,CAAT,GAAwB,CAA5B,CAA+B,CAE7B;AACA,GAAIG,CAAAA,KAAK,CAAGzB,WAAZ,CAEI;AACA,GAAM0B,CAAAA,QAAQ,CAAG,CAAE1B,WAAW,CAAGyB,KAAhB,CAAjB,CAA6C;AAC7C,GAAME,CAAAA,YAAY,gCAAQL,SAAS,CAAC,CAAD,CAAjB,EAAyBI,QAAzB,CAAlB,CAA0D;AAE9DT,OAAO,CAAC,CAAC,GAAD,CAAMU,YAAN,CAAD,CAAP,CACD,CAVD,IAUO,CACLT,MAAM,CAAC,CAAC,GAAD,CAAM,+EAAN,CAAD,CAAN,CACD,CACF,CAdS,CAAV,CAeD,CAhBM,CAAP,CAiBD,CAtBD,EAyBFV,IAAI,CAACC,MAAL,CAAY,mBAAZ,EAAiCC,KAAjC,CAAuC,SAAUC,MAAV,CAAkB,CAErD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CAEA,GAAMiB,CAAAA,GAAG,CAAIjB,MAAM,CAACkB,OAApB,CAEA,GAAKC,CAAAA,UAAU,CAAGF,GAAG,CAACG,aAAtB,CAEA,GAAMT,CAAAA,SAAS,CAAGrB,KAAK,CAACsB,MAAN,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACtB,GAAJ,GAAYU,IAAI,CAACoB,GAArB,EAAhB,CAAlB,CAEA,MAAO,IAAIhB,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAE9CC,UAAU,CAAC,UAAY,CAEnB;AACJ,GAAGW,UAAU,GAAK9B,WAAlB,CACA,CACG,GAAIsB,SAAS,CAAC,QAAD,CAAT,GAAwB,CAA5B,CAA+B,CAExB,GAAIW,CAAAA,QAAJ,CAEJ;AACAA,QAAQ,CAAGhC,KAAK,CAACiC,SAAN,CAAiB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACjC,GAAJ,GAAYU,IAAI,CAACoB,GAArB,EAApB,CAAX,CAEA;AACA/B,KAAK,CAACgC,QAAD,CAAL,CAAgB9B,QAAhB,CAA2BS,IAAI,CAACT,QAAhC,CAEA;AACCiC,YAAY,CAACC,UAAb,CAAwB,UAAxB,EACAD,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAiCzB,IAAI,CAAC0B,SAAL,CAAetC,KAAK,CAACgC,QAAD,CAApB,CAAjC,EAEDhB,OAAO,CAAC,CAAC,GAAD,CAAM,8BAAN,CAAD,CAAP,CAED,CAhBF,IAgBQ,CACLC,MAAM,CAAC,CAAC,GAAD,CAAM,kCAAN,CAAD,CAAN,CACD,CACJ,CArBD,IAuBA,CACCA,MAAM,CAAC,CAAC,GAAD,CAAM,kBAAN,CAAD,CAAN,CACA,CACE,CA7BO,CAAV,CA8BC,CAhCM,CAAP,CAiCD,CA3CH,EA+CAV,IAAI,CAACC,MAAL,CAAY,oBAAZ,EAAkCC,KAAlC,CAAwC,SAAUC,MAAV,CAAkB,CAEtD,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb,CAEA,GAAMW,CAAAA,SAAS,CAAGrB,KAAK,CAACsB,MAAN,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACtB,GAAJ,GAAYU,IAAI,CAACoB,GAArB,EAAhB,CAAlB,CAEA,MAAO,IAAIhB,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CC,UAAU,CAAC,UAAY,CAErB,GAAIG,SAAS,CAAC,QAAD,CAAT,GAAwB,CAA5B,CAA+B,CAG7B,GAAIW,CAAAA,QAAJ,CAEA;AACAA,QAAQ,CAAGhC,KAAK,CAACiC,SAAN,CAAiB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACjC,GAAJ,GAAYU,IAAI,CAACoB,GAArB,EAApB,CAAX,CAEA;AACA/B,KAAK,CAACgC,QAAD,CAAL,CAAgB9B,QAAhB,CAA2BS,IAAI,CAACT,QAAhC,CAEA;AACCiC,YAAY,CAACC,UAAb,CAAwB,UAAxB,EACAD,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAiCzB,IAAI,CAAC0B,SAAL,CAAetC,KAAK,CAACgC,QAAD,CAApB,CAAjC,EAEDb,OAAO,CAACC,GAAR,CAAYe,YAAY,CAACI,OAAb,CAAqB,UAArB,CAAZ,EAEAvB,OAAO,CAAC,CAAC,GAAD,CAAM,8BAAN,CAAD,CAAP,CAED,CAnBD,IAmBO,CACLC,MAAM,CAAC,CAAC,GAAD,CAAM,kCAAN,CAAD,CAAN,CACD,CAEF,CAzBS,CAAV,CA0BD,CA3BM,CAAP,CA4BD,CAlCH,EAqCEV,IAAI,CAACC,MAAL,CAAY,iBAAZ,EAA+BC,KAA/B,CAAqC,SAAUC,MAAV,CAAkB,CACtD;AAEA,MAAO,IAAIK,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC7CC,UAAU,CAAC,UAAY,CACnBF,OAAO,CAAC,CAAC,GAAD,CAAM,yCAAN,CAAD,CAAP,CACH,CAFS,CAAV,CAGD,CAJO,CAAP,CAMA,CATD,EAWD,CAlLD,CAoLA,cAAeV,CAAAA,WAAf","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport accessToken from \"../jwt-token-access/accessToken\";\n\nlet users = [\n  { uid: 1, username: 'admin', role : 'admin', password: '123456', email: 'admin@themesbrand.com' }\n];\n  \nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n\n  mock.onPost('/post-fake-register').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    users.push(user);\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost('/auth/login').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    console.log(user);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost('/fake-forget-pwd').reply(function (config) {\n   // User needs to check that user is eXist or not and send mail for Reset New password\n\n   return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n    });\n  });\n \n  });\n\n\n\n  mock.onPost('/post-jwt-register').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    users.push(user);\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost('/post-jwt-login').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          \n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          var token = accessToken;\n\n              // JWT AccessToken\n              const tokenObj = { accessToken : token };    // Token Obj\n              const validUserObj = { ...validUser[0], ...tokenObj };    // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n\n\nmock.onPost('/post-jwt-profile').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    \n    const one  = config.headers;\n\n    let  finalToken = one.Authorization;\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise(function (resolve, reject) {\n    \n    setTimeout(function () {\n\n        // Verify Jwt token from header.Authorization \n    if(finalToken === accessToken)\n    {\n       if (validUser['length'] === 1) {\n\n              let objIndex;\n\n          //Find index of specific object using findIndex method.    \n          objIndex = users.findIndex((obj => obj.uid === user.idx));\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n           localStorage.removeItem(\"authUser\");\n           localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n                    \n          resolve([200, \"Profile Editted successfully\"]);\n\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n    }\n    else\n    {\n     reject([400, \"Invalid Token !!\"]);  \n    }\n      });\n    });\n  });\n\n\n\nmock.onPost('/post-fake-profile').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n  \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n\n        if (validUser['length'] === 1) {\n\n    \n          let objIndex;\n\n          //Find index of specific object using findIndex method.    \n          objIndex = users.findIndex((obj => obj.uid === user.idx));\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n           localStorage.removeItem(\"authUser\");\n           localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n                    \n          console.log(localStorage.getItem(\"authUser\"));\n\n          resolve([200, \"Profile Editted successfully\"]);\n\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n        \n      });\n    });\n  });\n\n\n  mock.onPost('/jwt-forget-pwd').reply(function (config) {\n   // User needs to check that user is eXist or not and send mail for Reset New password\n\n   return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n    });\n  });\n \n  });\n\n}\n\nexport default fakeBackend;"]},"metadata":{},"sourceType":"module"}