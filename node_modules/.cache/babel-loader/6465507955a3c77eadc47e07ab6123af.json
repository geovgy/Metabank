{"ast":null,"code":"import firebase from \"firebase/app\"; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    this.registerUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.editProfileAPI = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n\n    this.setLoggeedInUser = user => {\n      localStorage.setItem(\"authUser\", JSON.stringify(user));\n    };\n\n    this.getAuthenticatedUser = () => {\n      if (!localStorage.getItem(\"authUser\")) return null;\n      return JSON.parse(localStorage.getItem(\"authUser\"));\n    };\n\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n  /**\n   * Registers the user with given details\n   */\n\n\n  /**\n   * Handle the error\n   * @param {*} error\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n\n}\n\nlet _fireBaseBackend = null;\n/**\n * Initilize the backend\n * @param {*} config\n */\n\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n\n  return _fireBaseBackend;\n};\n/**\n * Returns the firebase backend\n */\n\n\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\n\nexport { initFirebaseBackend, getFirebaseBackend };","map":{"version":3,"sources":["/Users/mac/metabank/src/helpers/firebase_helper.js"],"names":["firebase","FirebaseAuthBackend","constructor","firebaseConfig","registerUser","email","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","editProfileAPI","loginUser","signInWithEmailAndPassword","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","setLoggeedInUser","localStorage","setItem","JSON","stringify","getAuthenticatedUser","getItem","parse","initializeApp","onAuthStateChanged","removeItem","errorMessage","message","_fireBaseBackend","initFirebaseBackend","config","getFirebaseBackend"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          localStorage.setItem(\"authUser\", JSON.stringify(user));\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n\n  /**\n   * Registers the user with given details\n   */\n registerUser = (email, password) => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(\n          user => {\n            resolve(firebase.auth().currentUser);\n          },\n          error => {\n            reject(this._handleError(error));\n          }\n        );\n    });\n  };\n\n  /**\n   * Registers the user with given details\n   */\n  editProfileAPI = (email, password) => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(\n          user => {\n            resolve(firebase.auth().currentUser);\n          },\n          error => {\n            reject(this._handleError(error));\n          }\n        );\n    });\n  };\n\n  /**\n   * Login user with given details\n   */\n  loginUser = (email, password) => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .then(\n          user => {\n            resolve(firebase.auth().currentUser);\n          },\n          error => {\n            reject(this._handleError(error));\n          }\n        );\n    });\n  };\n\n  /**\n   * forget Password user with given details\n   */\n  forgetPassword = email => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        })\n        .then(() => {\n          resolve(true);\n        })\n        .catch(error => {\n          reject(this._handleError(error));\n        });\n    });\n  };\n\n  /**\n   * Logout the user\n   */\n  logout = () => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          resolve(true);\n        })\n        .catch(error => {\n          reject(this._handleError(error));\n        });\n    });\n  };\n\n  setLoggeedInUser = user => {\n    localStorage.setItem(\"authUser\", JSON.stringify(user));\n  };\n\n  /**\n   * Returns the authenticated user\n   */\n  getAuthenticatedUser = () => {\n    if (!localStorage.getItem(\"authUser\")) return null;\n    return JSON.parse(localStorage.getItem(\"authUser\"));\n  };\n\n  /**\n   * Handle the error\n   * @param {*} error\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n}\n\nlet _fireBaseBackend = null;\n\n/**\n * Initilize the backend\n * @param {*} config\n */\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n  return _fireBaseBackend;\n};\n\n/**\n * Returns the firebase backend\n */\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\n\nexport { initFirebaseBackend, getFirebaseBackend };\n"]},"metadata":{},"sourceType":"module"}