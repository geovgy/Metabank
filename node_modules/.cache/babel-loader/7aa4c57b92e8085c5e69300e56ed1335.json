{"ast":null,"code":"import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { LOCAL_STORAGE_SIGNIN_KEY } from '../App.constants';\nconst token = localStorage.getItem(\"token\");\n\nclass SuperadminContainer extends Container {\n  constructor() {\n    super();\n\n    this.goBack = props => {\n      props.history.goBack();\n    };\n\n    this.fetchUser = () => {\n      let user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n\n      if (user) {\n        user = JSON.parse(user); //   console.log(\"check access token\",user.access_token);\n        //   copySessionData.accessToken = user.access_token;\n        //   copySessionData.userId = user.id;\n        //   this.setState({ sessionData: copySessionData });\n        //   console.log(\"check access token\", copySessionData);\n        // console.log(\"check authuser from fetch :\", user);\n\n        return user;\n      }\n\n      return {};\n    };\n\n    this.signIn = ({\n      email,\n      password\n    }, props) => {\n      instance.post(`${process.env.REACT_APP_DATABASEURL}auth/login`, {\n        email,\n        password\n      }).then(response => {\n        const user = response.data.data;\n        console.log(user);\n        console.log(\"check base url \", process.env.REACT_APP_DATABASEURL);\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        }); // let copySessionData, user;\n        // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n        // copySessionData = ({}, this.state.sessionData);\n        // user = JSON.parse(user);\n        // copySessionData.userId = user.id;\n        // copySessionData.accessToken = response.data.data.access_token;\n        // this.setState({ sessionData: copySessionData });\n        // console.log(\"check todken here \", response.data.data.access_token );\n        // console.log(\"check todken here 2\", this.state.sessionData.accessToken );\n        // localStorage.setItem(\n        //   CONSTANTS.SESSIONBEARER,\n        //   JSON.stringify({\n        //     bearer: `Bearer ${data.data.message}`,\n        //     date: new Date(data.data.expirationDate),\n        //   })\n        // );\n\n        console.log(\"local storage data\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n        props.history.push(\"/new-order\");\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.updateClientProfile = ({\n      firstName,\n      lastName,\n      phone,\n      email,\n      country\n    }, props, userId) => {\n      // let user,copySessionData;\n      // console.log(\"check id \", this.state.userId);\n      // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n      // user = JSON.parse(user);\n      // copySessionData = ({}, this.state.sessionData);\n      // copySessionData.userId = user.id;\n      // this.setState({ sessionData: copySessionData });\n      console.log({\n        firstName,\n        lastName,\n        phone,\n        email,\n        country\n      }, props, userId);\n      instance.put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`, {\n        firstName,\n        lastName,\n        phone,\n        email,\n        country\n      }, {\n        headers: {\n          Authorization: `Bearer ${this.state.sessionData.accessToken}`\n        }\n      }).then(data => {\n        console.log(data);\n        console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n        let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n        x = JSON.parse(x);\n        console.log(x);\n        x.first_name = firstName;\n        x.last_name = lastName;\n        localStorage.setItem('authUser', JSON.stringify(x));\n        console.log(\"hitting updateclientProfile\");\n        console.log(data);\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.createAnnoucement = (state, title, body, roleId) => {\n      console.log(title);\n      console.log(body);\n      console.log(token);\n      console.log(roleId);\n      return new Promise((resolve, reject) => {\n        try {\n          instance.post(`${process.env.REACT_APP_DATABASEURL}/general-annoucement`, {\n            title: title,\n            body: body,\n            role: roleId\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }).then(res => {\n            var _res$data, _res$data$data;\n\n            resolve(res);\n            console.log(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.rows);\n          }).catch(e => {\n            console.log(e);\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    };\n\n    this.state = {\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1\n      }\n    };\n  }\n\n}\n\nexport { SuperadminContainer };","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/containers/SuperadminContainer.js"],"names":["Container","instance","CONSTANTS","LOCAL_STORAGE_SIGNIN_KEY","token","localStorage","getItem","SuperadminContainer","constructor","goBack","props","history","fetchUser","user","JSON","parse","signIn","email","password","post","process","env","REACT_APP_DATABASEURL","then","response","data","console","log","setItem","stringify","setState","sessionData","accessToken","access_token","userId","id","push","catch","e","updateClientProfile","firstName","lastName","phone","country","put","headers","Authorization","state","x","first_name","last_name","createAnnoucement","title","body","roleId","Promise","resolve","reject","role","res","rows"],"mappings":"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","sourcesContent":["import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport {LOCAL_STORAGE_SIGNIN_KEY} from '../App.constants'\n\nconst token = localStorage.getItem(\"token\");\n\n\nclass SuperadminContainer extends Container {\n  constructor() {\n    super();\n    this.state = {\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n      },\n    };\n  }\n  goBack = (props) => {\n    props.history.goBack();\n  };\n\n  \n\n  fetchUser = () => {\n  \n    let user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n\n\n    if (user) {\n\n      user = JSON.parse(user);\n      //   console.log(\"check access token\",user.access_token);\n      //   copySessionData.accessToken = user.access_token;\n      //   copySessionData.userId = user.id;\n\n      //   this.setState({ sessionData: copySessionData });\n      //   console.log(\"check access token\", copySessionData);\n\n      // console.log(\"check authuser from fetch :\", user);\n      return user;\n    }\n    return {};\n  };\n\n  signIn = ({ email, password }, props) => {\n    instance\n      .post(`${process.env.REACT_APP_DATABASEURL}auth/login`, { email, password })\n      .then((response) => {\n        const user = response.data.data;\n        console.log(user);\n        console.log(\"check base url \",process.env.REACT_APP_DATABASEURL)\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            accessToken: `${user.access_token}`,\n            userId: user.id,\n          },\n        })\n        // let copySessionData, user;\n        // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n        // copySessionData = ({}, this.state.sessionData);\n\n        // user = JSON.parse(user);\n        // copySessionData.userId = user.id;\n        // copySessionData.accessToken = response.data.data.access_token;\n\n\n        // this.setState({ sessionData: copySessionData });\n\n        // console.log(\"check todken here \", response.data.data.access_token );\n        // console.log(\"check todken here 2\", this.state.sessionData.accessToken );\n\n\n\n        // localStorage.setItem(\n        //   CONSTANTS.SESSIONBEARER,\n        //   JSON.stringify({\n        //     bearer: `Bearer ${data.data.message}`,\n        //     date: new Date(data.data.expirationDate),\n        //   })\n        // );\n        console.log(\"local storage data\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n        props.history.push(\"/new-order\");\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  updateClientProfile = (\n    { firstName, lastName, phone, email, country },\n    props,\n    userId,\n  ) => {\n    // let user,copySessionData;\n    // console.log(\"check id \", this.state.userId);\n\n    // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n    // user = JSON.parse(user);\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // this.setState({ sessionData: copySessionData });\n\n    console.log({ firstName, lastName, phone, email, country },\n      props,\n      userId)\n\n    instance\n      .put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`,\n        {\n          firstName,\n          lastName,\n          phone,\n          email,\n          country,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${this.state.sessionData.accessToken}`,\n          },\n        }\n      )\n      .then((data) => {\n        console.log(data);\n        console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n        let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n        x = JSON.parse(x);\n        console.log(x);\n        x.first_name =firstName;\n        x.last_name = lastName;\n\n         localStorage.setItem(\n            'authUser',\n            JSON.stringify(x)\n          );\n        console.log(\"hitting updateclientProfile\");\n        console.log(data)\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n  // \"title\": \"string\n  createAnnoucement = (state,title,body,roleId) => {\n    console.log(title);\n    console.log(body);\n    console.log(token);\n    console.log(roleId);\n    return new Promise((resolve, reject) => {\n      try {\n        instance.post(`${process.env.REACT_APP_DATABASEURL}/general-annoucement`, {\n          title:title,\n          body:body,\n          role:roleId\n        },{\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          })\n          .then((res) => {\n            resolve(res)\n            console.log(res?.data?.data?.rows)\n          })\n          .catch((e) => {\n            console.log(e)\n          })\n      }\n      catch (e){\n        console.log(e)\n      }\n  })\n  }\n}\n\nexport { SuperadminContainer };\n"]},"metadata":{},"sourceType":"module"}