{"ast":null,"code":"import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes, authRoutes, superadminRoutes } from \"../routes/allRoutes\";\nimport { LOCAL_STORAGE_SIGNIN_KEY } from '../App.constants';\nimport { ROLES } from '../App.constants';\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n\n    this.goBack = props => {\n      props.history.goBack();\n    };\n\n    this.fetchUser = () => {\n      // copySessionData = ({}, this.state.sessionData);\n      // copySessionData.userId = user.id;\n      // console.log(\"new user id\", { sessionData: copySessionData });\n      let user;\n\n      if (!localStorage.getItem('authUser')) {\n        user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n      } else user = localStorage.getItem('authUser');\n\n      if (user) {\n        user = JSON.parse(user); //   console.log(\"check access token\",user.access_token);\n        //   copySessionData.accessToken = user.access_token;\n        //   copySessionData.userId = user.id;\n        //   this.setState({ sessionData: copySessionData });\n        //   console.log(\"check access token\", copySessionData);\n        // console.log(\"check authuser from fetch :\", user);\n\n        this.setState({\n          sessionData: {\n            user: user,\n            accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        });\n        console.log(user);\n        return user;\n      }\n\n      return {};\n    };\n\n    this.signIn = ({\n      email,\n      password\n    }, props) => {\n      instance.post(`${process.env.REACT_APP_DATABASEURL}/auth/login`, {\n        email,\n        password\n      }).then(response => {\n        const user = response.data.data;\n        console.log(user);\n        console.log(\"check base url \", process.env.REACT_APP_DATABASEURL);\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            // accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        });\n        let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n\n        if (Authuser.subRole === \"Super-admin\") {\n          localStorage.setItem(\"users\", Authuser.subRole);\n        } else {\n          localStorage.setItem(\"users\", Authuser.Role.role);\n        }\n\n        localStorage.setItem(\"token\", Authuser.access_token); //check if writer has a score and redirect\n\n        async function fetchData() {\n          try {\n            const res = await instance.get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n              headers: {\n                Authorization: `Bearer ${Authuser.access_token}`\n              }\n            });\n            console.log(res.data.data);\n            return true;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n\n        fetchData();\n        console.log();\n\n        if (Authuser.Role.role === 'Client') {\n          localStorage.setItem(\"User\", 'Client');\n          props.history.push(\"/dashboard\");\n        } else if (Authuser.subRole === 'Super-admin') {\n          localStorage.setItem(\"SuperAdmin\", 'SuperAdmin');\n          props.history.push(\"/admin-dashboard\");\n        } else if (Authuser.Role.role === 'Admin') {\n          localStorage.setItem(\"Admin\", 'Admin');\n          props.history.push(\"/admindashboard\");\n        } else if (Authuser.Role.role === 'Writer') {\n          localStorage.setItem(\"Writer\", 'Writer');\n\n          if (res.data.data.score) {\n            props.history.push(\"/wdashboard\");\n          } else {\n            props.history.push(\"/wexam\");\n          }\n        } //check if writer has a score and redirect\n        // async function fetchData(){\n        //   try {\n        //     const res = await instance\n        //       .get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n        //         headers: {\n        //           Authorization: `Bearer ${Authuser.access_token}`,\n        //         },\n        //       })\n        //       console.log(res.data.data)\n        //       if (Authuser.Role.role === 'Writer') {\n        //         localStorage.setItem(\"Writer\", 'Writer')\n        //         if (res.data.data.score) {\n        //           props.history.push(\"/wdashboard\");\n        //         }\n        //         else {\n        //           props.history.push(\"/wexam\");\n        //         }\n        //       }\n        //   } catch (e) {\n        //     console.log(e);\n        //   }\n        //   }\n        //   fetchData();\n\n\n        return {};\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.verifyUser = (id, props) => {\n      console.log(\"my id first :\", id);\n      instance.get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`).then(response => {\n        const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n        return true;\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.registerUser = ({\n      firstname,\n      lastname,\n      phone,\n      email,\n      country,\n      password,\n      role\n    }) => {\n      return new Promise((resolve, reject) => {\n        console.log({\n          firstname,\n          lastname,\n          phone,\n          email,\n          country,\n          password,\n          role\n        });\n\n        const filterUserId = resData => {\n          var str = resData;\n          var res = str.replace(/\\D/g, \"\");\n          return res;\n        };\n\n        instance.post(`${process.env.REACT_APP_DATABASEURL}auth/signup`, {\n          firstname: firstname,\n          lastname: lastname,\n          phone: phone,\n          email: email,\n          country: country,\n          password: password,\n          role: role\n        }).then(response => {\n          const user = response.data;\n          const verifyId = filterUserId(user.data);\n          this.setState({\n            sessionData: {\n              register: verifyId\n            }\n          });\n          console.log(verifyId);\n          console.log(\"register response\", user);\n          console.log(resolve(response));\n          resolve(response);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.updateClientProfile = ({\n      firstName,\n      lastName,\n      phone,\n      email,\n      country\n    }, userId) => {\n      return new Promise((resolve, reject) => {\n        console.log(\"token preview\", firstName); // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n\n        const token = localStorage.getItem(\"token\");\n        instance.put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`, {\n          firstname: firstName,\n          lastname: lastName,\n          phone: phone,\n          email: email,\n          country: country\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(data => {\n          console.log(data);\n          console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n          let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n          x = JSON.parse(x);\n          console.log(x);\n          x.first_name = firstName;\n          x.last_name = lastName;\n          localStorage.setItem('authUser', JSON.stringify(x));\n          console.log(\"hitting updateclientProfile\");\n          console.log(data);\n          this.setState({\n            updatedProfile: !this.state.updatedProfile\n          });\n          resolve(data);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register: null\n      }\n    };\n  }\n\n  ispermission(role = [...ROLES]) {\n    var _this$state, _this$state$sessionDa, _this$state$sessionDa2, _this$state$sessionDa3, _this$state2, _this$state2$sessionD, _this$state2$sessionD2, _this$state2$sessionD3;\n\n    console.log((_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$sessionDa = _this$state.sessionData) === null || _this$state$sessionDa === void 0 ? void 0 : (_this$state$sessionDa2 = _this$state$sessionDa.user) === null || _this$state$sessionDa2 === void 0 ? void 0 : (_this$state$sessionDa3 = _this$state$sessionDa2.Role) === null || _this$state$sessionDa3 === void 0 ? void 0 : _this$state$sessionDa3.role);\n    const adminRole = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$sessionD = _this$state2.sessionData) === null || _this$state2$sessionD === void 0 ? void 0 : (_this$state2$sessionD2 = _this$state2$sessionD.user) === null || _this$state2$sessionD2 === void 0 ? void 0 : (_this$state2$sessionD3 = _this$state2$sessionD2.Role) === null || _this$state2$sessionD3 === void 0 ? void 0 : _this$state2$sessionD3.role;\n    const isPermitted = role.filter(item => {\n      return item === adminRole;\n    });\n    return isPermitted.length > 0 ? true : false;\n  }\n\n}\n\nexport { UserContainer }; // let user,copySessionData;\n// console.log(\"check id \", this.state.userId);\n// user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n// user = JSON.parse(user);\n// copySessionData = ({}, this.state.sessionData);\n// copySessionData.userId = user.id;\n// this.setState({ sessionData: copySessionData });","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/containers/UserContainer.js"],"names":["Container","instance","CONSTANTS","userRoutes","authRoutes","superadminRoutes","LOCAL_STORAGE_SIGNIN_KEY","ROLES","UserContainer","constructor","goBack","props","history","fetchUser","user","localStorage","getItem","JSON","parse","setState","sessionData","accessToken","access_token","userId","id","console","log","signIn","email","password","post","process","env","REACT_APP_DATABASEURL","then","response","data","setItem","stringify","Authuser","subRole","Role","role","fetchData","res","get","headers","Authorization","e","push","score","catch","verifyUser","resStatus","status","registerUser","firstname","lastname","phone","country","Promise","resolve","reject","filterUserId","resData","str","replace","verifyId","register","updateClientProfile","firstName","lastName","token","put","x","first_name","last_name","updatedProfile","state","ispermission","adminRole","isPermitted","filter","item","length"],"mappings":"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","sourcesContent":["import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes, authRoutes, superadminRoutes } from \"../routes/allRoutes\";\nimport { LOCAL_STORAGE_SIGNIN_KEY } from '../App.constants'\nimport { ROLES } from '../App.constants'\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register: null,\n      },\n    };\n  }\n\n  ispermission(role = [...ROLES]) {\n    console.log(this.state?.sessionData?.user?.Role?.role)\n    const adminRole = this.state?.sessionData?.user?.Role?.role;\n\n    const isPermitted = role.filter(item => {\n      return item === adminRole\n    })\n\n    return isPermitted.length > 0 ? true : false;\n\n  }\n\n\n\n  goBack = (props) => {\n    props.history.goBack();\n  };\n\n  fetchUser = () => {\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // console.log(\"new user id\", { sessionData: copySessionData });\n    let user\n\n    if (!localStorage.getItem('authUser')) {\n      user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY)\n    } else user = localStorage.getItem('authUser')\n    if (user) {\n\n      user = JSON.parse(user);\n      //   console.log(\"check access token\",user.access_token);\n      //   copySessionData.accessToken = user.access_token;\n      //   copySessionData.userId = user.id;\n\n      //   this.setState({ sessionData: copySessionData });\n      //   console.log(\"check access token\", copySessionData);\n\n      // console.log(\"check authuser from fetch :\", user);\n      this.setState({\n        sessionData: {\n          user: user,\n          accessToken: `${user.access_token}`,\n          userId: user.id,\n        },\n      })\n      console.log(user)\n      return user;\n    }\n    return {};\n  };\n\n\n  signIn = ({ email, password }, props) => {\n    instance\n      .post(`${process.env.REACT_APP_DATABASEURL}/auth/login`, { email, password })\n      .then((response) => {\n        const user = response.data.data;\n        console.log(user);\n\n        console.log(\"check base url \", process.env.REACT_APP_DATABASEURL)\n\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        this.setState({\n          sessionData: {\n            user: user,\n            // accessToken: `${user.access_token}`,\n            userId: user.id,\n          },\n\n        });\n        let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY))\n        if (Authuser.subRole === \"Super-admin\") {\n          localStorage.setItem(\"users\", Authuser.subRole)\n        } else {\n          localStorage.setItem(\"users\", Authuser.Role.role)\n        }\n        localStorage.setItem(\"token\", Authuser.access_token)\n\n\n   //check if writer has a score and redirect\n        async function fetchData(){\n          try {\n            const res = await instance\n              .get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n                headers: {\n                  Authorization: `Bearer ${Authuser.access_token}`,\n                },\n              })\n              console.log(res.data.data)\n              return true;\n\n          } catch (e) {\n            console.log(e);\n          }\n          }\n          fetchData();\n\n          console.log()\n\n        if (Authuser.Role.role === 'Client') {\n\n          localStorage.setItem(\"User\", 'Client')\n          props.history.push(\"/dashboard\");\n        }\n        else if (Authuser.subRole === 'Super-admin') {\n\n          localStorage.setItem(\"SuperAdmin\", 'SuperAdmin')\n          props.history.push(\"/admin-dashboard\");\n        } else if (Authuser.Role.role === 'Admin') {\n          localStorage.setItem(\"Admin\", 'Admin')\n          props.history.push(\"/admindashboard\");\n        }\n\n        else if (Authuser.Role.role === 'Writer') {\n          localStorage.setItem(\"Writer\", 'Writer')\n\n          if (res.data.data.score) {\n            props.history.push(\"/wdashboard\");\n          }\n          else {\n            props.history.push(\"/wexam\");\n          }\n        }\n\n        //check if writer has a score and redirect\n        // async function fetchData(){\n        //   try {\n        //     const res = await instance\n        //       .get(`${process.env.REACT_APP_DATABASEURL}/exam/user/${Authuser.id}`, {\n        //         headers: {\n        //           Authorization: `Bearer ${Authuser.access_token}`,\n        //         },\n        //       })\n\n        //       console.log(res.data.data)\n\n        //       if (Authuser.Role.role === 'Writer') {\n\n        //         localStorage.setItem(\"Writer\", 'Writer')\n        //         if (res.data.data.score) {\n        //           props.history.push(\"/wdashboard\");\n        //         }\n        //         else {\n        //           props.history.push(\"/wexam\");\n        //         }\n        //       }\n        //   } catch (e) {\n        //     console.log(e);\n        //   }\n        //   }\n        //   fetchData();\n\n\n        return {};\n\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n  };\n\n  // /auth/verify/{id}\n  verifyUser = (id, props) => {\n    console.log(\"my id first :\", id)\n    instance\n      .get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`)\n      .then((response) => {\n        const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n\n        return true;\n\n      })\n      .catch((e) => {\n        console.log(e);\n\n      });\n  }\n\n\n  registerUser = ({ firstname, lastname,\n    phone,\n    email,\n    country,\n    password,\n    role }) => {\n    return new Promise((resolve, reject) => {\n      console.log({\n        firstname, lastname,\n        phone,\n        email,\n        country,\n        password,\n        role\n      })\n      const filterUserId = (resData) => {\n        var str = resData;\n        var res = str.replace(/\\D/g, \"\");\n        return res;\n      }\n\n      instance\n        .post(`${process.env.REACT_APP_DATABASEURL}auth/signup`,\n          {\n            firstname: firstname, lastname: lastname,\n            phone: phone,\n            email: email,\n            country: country,\n            password: password,\n            role: role\n          })\n        .then((response) => {\n          const user = response.data;\n          const verifyId = filterUserId(user.data);\n          this.setState({\n            sessionData: {\n              register: verifyId\n            },\n          });\n          console.log(verifyId);\n          console.log(\"register response\", user)\n          console.log(resolve(response));\n          resolve(response);\n\n        })\n        .catch((e) => {\n          console.log(e);\n          reject(e);\n        });\n    })\n  }\n\n\n  updateClientProfile = ({ firstName, lastName, phone, email, country }, userId\n\n  ) => {\n    return new Promise((resolve, reject) => {\n      console.log(\"token preview\", firstName)\n\n      // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n      const token = localStorage.getItem(\"token\")\n      instance\n        .put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`,\n          {\n            firstname: firstName,\n            lastname: lastName,\n            phone: phone,\n            email: email,\n            country: country\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        .then((data) => {\n          console.log(data);\n          console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n          let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n          x = JSON.parse(x);\n          console.log(x);\n          x.first_name = firstName;\n          x.last_name = lastName;\n\n          localStorage.setItem(\n            'authUser',\n            JSON.stringify(x)\n          );\n          console.log(\"hitting updateclientProfile\");\n          console.log(data);\n          this.setState({\n            updatedProfile: !this.state.updatedProfile\n          })\n          resolve(data);\n        })\n        .catch((e) => {\n          console.log(e);\n          reject(e);\n        });\n    })\n  }\n\n}\n\nexport { UserContainer };\n\n\n\n    // let user,copySessionData;\n    // console.log(\"check id \", this.state.userId);\n\n    // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n    // user = JSON.parse(user);\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // this.setState({ sessionData: copySessionData });"]},"metadata":{},"sourceType":"module"}