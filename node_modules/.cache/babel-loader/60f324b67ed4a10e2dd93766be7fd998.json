{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; //Account Redux states\n\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, registerUserFailed } from './actions'; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\nimport { postFakeRegister, postJwtRegister } from '../../../helpers/fakebackend_helper'; // initialize relavant method of both Auth\n\nconst fireBaseBackend = getFirebaseBackend(); // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtRegister, '/post-jwt-register', user);\n      yield put(registerUserSuccessful(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeRegister, '/post-fake-register', user);\n      yield put(registerUserSuccessful(response));\n    }\n  } catch (error) {\n    yield put(registerUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["/Users/mac/metabank/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","registerUserFailed","getFirebaseBackend","postFakeRegister","postJwtRegister","fireBaseBackend","registerUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","response","email","password","error","watchUserRegister","accountSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,WAA3D,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,qCAAlD,C,CAEA;;AACA,MAAMC,eAAe,GAAGH,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUI,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC1C,MAAI;AACH,QAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAAzC,EACA;AACO,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACO,eAAe,CAACC,YAAjB,EAA+BE,IAAI,CAACK,KAApC,EAA2CL,IAAI,CAACM,QAAhD,CAA3B;AACA,YAAMlB,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACN,KAJD,MAKQ,IAAGH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAAzC,EACL;AACK,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACM,eAAD,EAAkB,oBAAlB,EAAwCI,IAAxC,CAA3B;AACD,YAAMZ,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACH,KAJI,MAKH,IAAGH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAAzC,EACL;AACO,YAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACK,gBAAD,EAAmB,qBAAnB,EAA0CK,IAA1C,CAA3B;AACA,YAAMZ,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAT;AACN;AACD,GAhBD,CAgBE,OAAOG,KAAP,EAAc;AACZ,UAAMnB,GAAG,CAACK,kBAAkB,CAACc,KAAD,CAAnB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACjC,QAAMtB,SAAS,CAACK,aAAD,EAAgBO,YAAhB,CAAf;AACH;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAMpB,GAAG,CAAC,CAACF,IAAI,CAACqB,iBAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,WAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n//Account Redux states\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, registerUserFailed } from './actions';\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\nimport { postFakeRegister, postJwtRegister } from '../../../helpers/fakebackend_helper';\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }) {\n    try {\n    \tif(process.env.REACT_APP_DEFAULTAUTH === \"firebase\")\n    \t{\n            const response = yield call(fireBaseBackend.registerUser, user.email, user.password);\n            yield put(registerUserSuccessful(response));\n    \t} \n        else if(process.env.REACT_APP_DEFAULTAUTH === \"jwt\")\n        { \n             const response = yield call(postJwtRegister, '/post-jwt-register', user);\n            yield put(registerUserSuccessful(response));\n        }\n    \telse if(process.env.REACT_APP_DEFAULTAUTH === \"fake\")\n    \t{\n            const response = yield call(postFakeRegister, '/post-fake-register', user);\n            yield put(registerUserSuccessful(response));\n    \t}\n    } catch (error) {\n        yield put(registerUserFailed(error));\n    }\n}\n\nexport function* watchUserRegister() {\n    yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n    yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;"]},"metadata":{},"sourceType":"module"}