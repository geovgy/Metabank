{"ast":null,"code":"import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes, authRoutes, superadminRoutes } from \"../routes/allRoutes\";\nimport { LOCAL_STORAGE_SIGNIN_KEY, isCompletedExam } from '../App.constants';\nimport { ROLES } from '../App.constants';\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n\n    this.goBack = props => {\n      props.history.goBack();\n    };\n\n    this.fetchUser = () => {\n      // copySessionData = ({}, this.state.sessionData);\n      // copySessionData.userId = user.id;\n      // console.log(\"new user id\", { sessionData: copySessionData });\n      let user;\n\n      if (!localStorage.getItem('authUser')) {\n        user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n      } else user = localStorage.getItem('authUser');\n\n      if (user) {\n        user = JSON.parse(user); //   console.log(\"check access token\",user.access_token);\n        //   copySessionData.accessToken = user.access_token;\n        //   copySessionData.userId = user.id;\n        //   this.setState({ sessionData: copySessionData });\n        //   console.log(\"check access token\", copySessionData);\n        // console.log(\"check authuser from fetch :\", user);\n\n        this.setState({\n          sessionData: {\n            user: user,\n            accessToken: `${user.access_token}`,\n            userId: user.id\n          }\n        });\n        return user;\n      }\n\n      return {};\n    };\n\n    this.fetchAllUser = bearertoken => {\n      return new Promise((resolve, reject) => {\n        instance.get(`${process.env.REACT_APP_DATABASEURL}user`, {\n          headers: {\n            Authorization: `Bearer ${bearertoken}`\n          }\n        }).then(response => {\n          resolve(response);\n          this.setState({\n            sessionData: {\n              allUserList: response.data.data.rows\n            }\n          });\n        }).catch(e => console.log(e));\n      });\n    };\n\n    this.findWriterExam = (userId, bearertoken) => {\n      return new Promise((resolve, reject) => {\n        instance.get(`${process.env.REACT_APP_DATABASEURL}exam/user/${userId}`, {\n          // {userId: userId},\n          headers: {\n            Authorization: `Bearer ${bearertoken}`\n          }\n        }).then(response => {\n          resolve(response === null || response === void 0 ? void 0 : response.data);\n        }).catch(e => {\n          var _e$response, _e$response2;\n\n          console.log(e);\n          console.log(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data);\n          console.log(e === null || e === void 0 ? void 0 : e.response);\n          resolve(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.data);\n        });\n      });\n    };\n\n    this.init = () => {\n      try {\n        const writerDom = localStorage.getItem(isCompletedExam);\n\n        if (writerDom == 'true') {\n          this.setState({\n            writerDom: true\n          });\n        } else {\n          this.setState({\n            writerDom: false\n          });\n        }\n      } catch (e) {\n        this.setState({\n          writerDom: false\n        });\n      }\n    };\n\n    this.signIn = ({\n      email,\n      password\n    }, props) => {\n      return new Promise((resolve, reject) => {\n        instance.post(`${process.env.REACT_APP_DATABASEURL}auth/login`, {\n          email,\n          password\n        }).then(async response => {\n          const user = response.data.data;\n          console.log(user);\n          console.log(\"check base url \", process.env.REACT_APP_DATABASEURL);\n          localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n          console.log(user);\n          this.setState({\n            sessionData: {\n              user: user,\n              // accessToken: `${user.access_token}`,\n              userId: user.id\n            }\n          });\n          let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n\n          if (Authuser.subRole === \"Super-admin\") {\n            localStorage.setItem(\"users\", Authuser.subRole);\n          } else {\n            localStorage.setItem(\"users\", Authuser.Role.role);\n          }\n\n          localStorage.setItem(\"token\", Authuser.access_token); //check if writer has a score and redirect\n\n          /*async function fetchData(){\n            try {\n              const res = await instance\n                .get(`${process.env.REACT_APP_DATABASEURL}exam/user/${Authuser.id}`, {\n                  headers: {\n                    Authorization: `Bearer ${Authuser.access_token}`,\n                  },\n                })\n                 if(res.data.data.score){\n                  this.setState({\n                    sessionData: {\n                      score: res.data.data.score\n                    },})\n                }\n             } catch (e) {\n              console.log(e);\n            }\n            }\n            fetchData();*/\n\n          if (Authuser.Role.role === 'Client') {\n            localStorage.setItem(\"User\", 'Client');\n            props.history.push(\"/dashboard\");\n          } else if (Authuser.subRole === 'Super-admin') {\n            localStorage.setItem(\"SuperAdmin\", 'SuperAdmin');\n            props.history.push(\"/admin-dashboard\");\n          } else if (Authuser.Role.role === 'Admin') {\n            localStorage.setItem(\"Admin\", 'Admin');\n            props.history.push(\"/admindashboard\");\n          } else if (Authuser.Role.role === 'Writer') {\n            localStorage.setItem(\"Writer\", 'Writer');\n            console.log(user);\n            const writerExamStatus = await this.findWriterExam(user === null || user === void 0 ? void 0 : user.id, user === null || user === void 0 ? void 0 : user.access_token);\n            console.log(writerExamStatus === null || writerExamStatus === void 0 ? void 0 : writerExamStatus.status, \"status of exam\");\n\n            if ((writerExamStatus === null || writerExamStatus === void 0 ? void 0 : writerExamStatus.status) == 'Success') {\n              this.setState({\n                writerDom: true\n              }, () => {\n                localStorage.setItem(isCompletedExam, \"true\");\n                props.history.push(\"/wdashboard\");\n              });\n            } else {\n              this.setState({\n                writerDom: false\n              }, () => {\n                localStorage.setItem(isCompletedExam, \"false\");\n                props.history.push(\"/wexam\");\n              });\n            }\n            /*if (this.state.sessionData.score !== '') {\n              props.history.push(\"/wdashboard\");\n            }\n            else {\n              props.history.push(\"/wexam\");\n            }*/\n\n          } // return {};\n\n\n          console.log(resolve(response));\n          resolve(response);\n        }).catch(e => {\n          console.log(e); // console.log(reject(e));\n          // reject(e);\n        });\n      });\n    };\n\n    this.verifyUser = (id, props) => {\n      console.log(\"my id first :\", id);\n      instance.get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`).then(response => {\n        const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n        return true;\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.registerUser = ({\n      firstname,\n      lastname,\n      phone,\n      email,\n      country,\n      password,\n      role\n    }) => {\n      return new Promise((resolve, reject) => {\n        // console.log({firstname, lastname,\n        //   phone,\n        //   email,\n        //   country,\n        //   password,\n        //   role})\n        const filterUserId = resData => {\n          var str = resData;\n          var res = str.replace(/\\D/g, \"\");\n          return res;\n        };\n\n        instance.post(`${process.env.REACT_APP_DATABASEURL}auth/signup`, {\n          firstname: firstname,\n          lastname: lastname,\n          phone: phone,\n          email: email,\n          country: country,\n          password: password,\n          role: role\n        }).then(response => {\n          const user = response.data;\n          const verifyId = filterUserId(user.data);\n          this.setState({\n            sessionData: {\n              register: verifyId\n            }\n          });\n          console.log(verifyId);\n          console.log(\"register response\", user);\n          console.log(resolve(response));\n          resolve(response);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.updateClientProfile = ({\n      firstName,\n      lastName,\n      phone,\n      email,\n      country\n    }, userId) => {\n      return new Promise((resolve, reject) => {\n        console.log(\"token preview\", firstName); // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n\n        const token = localStorage.getItem(\"token\");\n        instance.put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`, {\n          firstname: firstName,\n          lastname: lastName,\n          phone: phone,\n          email: email,\n          country: country\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(data => {\n          console.log(data);\n          console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n          let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n          x = JSON.parse(x);\n          console.log(x);\n          x.first_name = firstName;\n          x.last_name = lastName;\n          localStorage.setItem('authUser', JSON.stringify(x));\n          console.log(\"hitting updateclientProfile\");\n          console.log(data);\n          this.setState({\n            updatedProfile: !this.state.updatedProfile\n          });\n          resolve(data);\n        }).catch(e => {\n          console.log(e);\n          reject(e);\n        });\n      });\n    };\n\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register: null,\n        score: '',\n        allUserList: []\n      },\n      writerDom: false\n    };\n    this.init();\n  }\n\n  ispermission(role = [...ROLES]) {\n    var _this$state, _this$state$sessionDa, _this$state$sessionDa2, _this$state$sessionDa3, _this$state2, _this$state2$sessionD, _this$state2$sessionD2, _this$state2$sessionD3;\n\n    console.log((_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$sessionDa = _this$state.sessionData) === null || _this$state$sessionDa === void 0 ? void 0 : (_this$state$sessionDa2 = _this$state$sessionDa.user) === null || _this$state$sessionDa2 === void 0 ? void 0 : (_this$state$sessionDa3 = _this$state$sessionDa2.Role) === null || _this$state$sessionDa3 === void 0 ? void 0 : _this$state$sessionDa3.role);\n    const adminRole = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$sessionD = _this$state2.sessionData) === null || _this$state2$sessionD === void 0 ? void 0 : (_this$state2$sessionD2 = _this$state2$sessionD.user) === null || _this$state2$sessionD2 === void 0 ? void 0 : (_this$state2$sessionD3 = _this$state2$sessionD2.Role) === null || _this$state2$sessionD3 === void 0 ? void 0 : _this$state2$sessionD3.role;\n    const isPermitted = role.filter(item => {\n      return item === adminRole;\n    });\n    return isPermitted.length > 0 ? true : false;\n  }\n\n}\n\nexport { UserContainer }; // let user,copySessionData;\n// console.log(\"check id \", this.state.userId);\n// user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n// user = JSON.parse(user);\n// copySessionData = ({}, this.state.sessionData);\n// copySessionData.userId = user.id;\n// this.setState({ sessionData: copySessionData });","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/containers/UserContainer.js"],"names":["Container","instance","CONSTANTS","userRoutes","authRoutes","superadminRoutes","LOCAL_STORAGE_SIGNIN_KEY","isCompletedExam","ROLES","UserContainer","constructor","goBack","props","history","fetchUser","user","localStorage","getItem","JSON","parse","setState","sessionData","accessToken","access_token","userId","id","fetchAllUser","bearertoken","Promise","resolve","reject","get","process","env","REACT_APP_DATABASEURL","headers","Authorization","then","response","allUserList","data","rows","catch","e","console","log","findWriterExam","init","writerDom","signIn","email","password","post","setItem","stringify","Authuser","subRole","Role","role","push","writerExamStatus","status","verifyUser","resStatus","registerUser","firstname","lastname","phone","country","filterUserId","resData","str","res","replace","verifyId","register","updateClientProfile","firstName","lastName","token","put","x","first_name","last_name","updatedProfile","state","score","ispermission","adminRole","isPermitted","filter","item","length"],"mappings":"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","sourcesContent":["import { Container } from \"unstated\";\nimport instance from \"../helpers/axiosly\";\nimport CONSTANTS from \"../helpers/App.constant\";\nimport { userRoutes, authRoutes, superadminRoutes } from \"../routes/allRoutes\";\nimport { LOCAL_STORAGE_SIGNIN_KEY, isCompletedExam } from '../App.constants'\nimport { ROLES } from '../App.constants'\n\nclass UserContainer extends Container {\n  constructor() {\n    super();\n    this.state = {\n      updatedProfile: false,\n      sessionData: {\n        user: null,\n        accessToken: \"\",\n        userId: -1,\n        register: null,\n        score: '',\n        allUserList: []\n      },\n      writerDom: false\n    };\n\n    this.init();\n  }\n\n  ispermission(role = [...ROLES]) {\n    console.log(this.state?.sessionData?.user?.Role?.role)\n    const adminRole = this.state?.sessionData?.user?.Role?.role;\n\n    const isPermitted = role.filter(item => {\n      return item === adminRole\n    })\n\n    return isPermitted.length > 0 ? true : false;\n\n  }\n\n\n\n  goBack = (props) => {\n    props.history.goBack();\n  };\n\n  fetchUser = () => {\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // console.log(\"new user id\", { sessionData: copySessionData });\n    let user\n\n    if (!localStorage.getItem('authUser')) {\n      user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY)\n    } else user = localStorage.getItem('authUser')\n    if (user) {\n\n      user = JSON.parse(user);\n      //   console.log(\"check access token\",user.access_token);\n      //   copySessionData.accessToken = user.access_token;\n      //   copySessionData.userId = user.id;\n\n      //   this.setState({ sessionData: copySessionData });\n      //   console.log(\"check access token\", copySessionData);\n\n      // console.log(\"check authuser from fetch :\", user);\n      this.setState({\n        sessionData: {\n          user: user,\n          accessToken: `${user.access_token}`,\n          userId: user.id,\n        },\n      })\n      return user;\n    }\n    return {};\n  };\n\n  fetchAllUser = (bearertoken) => {\n    return new Promise((resolve, reject)=> {\n      instance\n      .get(`${process.env.REACT_APP_DATABASEURL}user`, {\n        headers: {\n          Authorization: `Bearer ${bearertoken}`,\n        },\n      })\n      .then((response) => {\n        resolve(response)\n            this.setState({\n              sessionData: {\n                allUserList: response.data.data.rows,\n              },\n            });\n      })\n\n      .catch((e) => console.log(e));\n    })\n\n  }\n\n  findWriterExam = (userId,bearertoken) => {\n    return new Promise((resolve, reject)=> {\n    instance\n    .get(`${process.env.REACT_APP_DATABASEURL}exam/user/${userId}`, {\n      // {userId: userId},\n      headers: {\n        Authorization: `Bearer ${bearertoken}`,\n      },\n\n    }).then((response) => {\n      resolve(response?.data);\n\n    }).catch((e) => {\n      console.log(e);\n      console.log(e?.response?.data);\n      console.log(e?.response);\n      resolve(e?.response?.data);\n    });\n  })\n\n\n  }\n\n  init = () => {\n    try {\n      const writerDom = localStorage.getItem(isCompletedExam);\n      if (writerDom == 'true') {\n        this.setState({writerDom: true});\n      } else {\n        this.setState({writerDom: false});\n      }\n    } catch(e) {\n      this.setState({writerDom: false});\n    }\n  }\n\n  signIn = ({ email, password }, props) => {\n    return new Promise((resolve, reject) => {\n      instance\n      .post(`${process.env.REACT_APP_DATABASEURL}auth/login`, { email, password })\n      .then(async (response) => {\n        const user = response.data.data;\n        console.log(user);\n\n        console.log(\"check base url \", process.env.REACT_APP_DATABASEURL)\n\n        localStorage.setItem(LOCAL_STORAGE_SIGNIN_KEY, JSON.stringify(response.data.data));\n        console.log(user)\n\n        this.setState({\n          sessionData: {\n            user: user,\n            // accessToken: `${user.access_token}`,\n            userId: user.id,\n          },\n\n        });\n        let Authuser = JSON.parse(localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY))\n        if (Authuser.subRole === \"Super-admin\") {\n          localStorage.setItem(\"users\", Authuser.subRole)\n        } else {\n          localStorage.setItem(\"users\", Authuser.Role.role)\n        }\n        localStorage.setItem(\"token\", Authuser.access_token)\n\n\n        //check if writer has a score and redirect\n        /*async function fetchData(){\n          try {\n            const res = await instance\n              .get(`${process.env.REACT_APP_DATABASEURL}exam/user/${Authuser.id}`, {\n                headers: {\n                  Authorization: `Bearer ${Authuser.access_token}`,\n                },\n              })\n\n              if(res.data.data.score){\n                this.setState({\n                  sessionData: {\n                    score: res.data.data.score\n                  },})\n              }\n\n          } catch (e) {\n            console.log(e);\n          }\n          }\n          fetchData();*/\n\n\n        if (Authuser.Role.role === 'Client') {\n\n          localStorage.setItem(\"User\", 'Client')\n          props.history.push(\"/dashboard\");\n        }\n        else if (Authuser.subRole === 'Super-admin') {\n\n          localStorage.setItem(\"SuperAdmin\", 'SuperAdmin')\n          props.history.push(\"/admin-dashboard\");\n        } else if (Authuser.Role.role === 'Admin') {\n          localStorage.setItem(\"Admin\", 'Admin')\n          props.history.push(\"/admindashboard\");\n        } else if (Authuser.Role.role === 'Writer') {\n          localStorage.setItem(\"Writer\", 'Writer');\n          console.log(user);\n          const writerExamStatus = await this.findWriterExam(user?.id, user?.access_token);\n          console.log(writerExamStatus?.status, \"status of exam\");\n          if (writerExamStatus?.status == 'Success') {\n            this.setState({writerDom: true}, () => {\n              localStorage.setItem(isCompletedExam, \"true\");\n              props.history.push(\"/wdashboard\");\n            });\n          } else {\n            this.setState({writerDom: false}, () => {\n              localStorage.setItem(isCompletedExam, \"false\");\n              props.history.push(\"/wexam\");\n            });\n          }\n\n          /*if (this.state.sessionData.score !== '') {\n            props.history.push(\"/wdashboard\");\n          }\n          else {\n            props.history.push(\"/wexam\");\n          }*/\n        }\n\n\n\n\n        // return {};\n        console.log(resolve(response));\n        resolve(response);\n\n      })\n      .catch((e) => {\n        console.log(e);\n        // console.log(reject(e));\n          // reject(e);\n      });\n\n    })\n\n\n  };\n\n  // /auth/verify/{id}\n  verifyUser = (id, props) => {\n    console.log(\"my id first :\", id)\n    instance\n      .get(`${process.env.REACT_APP_DATABASEURL}auth/verify/${id}`)\n      .then((response) => {\n        const resStatus = response.data.status;\n        console.log(resStatus);\n        props.history.push(\"/login\");\n\n        return true;\n\n      })\n      .catch((e) => {\n        console.log(e);\n\n      });\n  }\n\n\n  registerUser = ({ firstname, lastname,\n    phone,\n    email,\n    country,\n    password,\n    role }) => {\n    return new Promise((resolve, reject) => {\n      // console.log({firstname, lastname,\n      //   phone,\n      //   email,\n      //   country,\n      //   password,\n      //   role})\n      const filterUserId = (resData) => {\n        var str = resData;\n        var res = str.replace(/\\D/g, \"\");\n        return res;\n      }\n\n      instance\n        .post(`${process.env.REACT_APP_DATABASEURL}auth/signup`,\n          {\n            firstname: firstname, lastname: lastname,\n            phone: phone,\n            email: email,\n            country: country,\n            password: password,\n            role: role\n          })\n        .then((response) => {\n          const user = response.data;\n          const verifyId = filterUserId(user.data);\n          this.setState({\n            sessionData: {\n              register: verifyId\n            },\n          });\n          console.log(verifyId);\n          console.log(\"register response\", user)\n          console.log(resolve(response));\n          resolve(response);\n\n        })\n        .catch((e) => {\n          console.log(e);\n          reject(e);\n        });\n    })\n  }\n\n\n  updateClientProfile = ({ firstName, lastName, phone, email, country }, userId\n\n  ) => {\n    return new Promise((resolve, reject) => {\n      console.log(\"token preview\", firstName)\n\n      // console.log(\"this is update profile data received : \",{ firstName, lastName, phone, email, country },userId)\n      const token = localStorage.getItem(\"token\")\n      instance\n        .put(`${process.env.REACT_APP_DATABASEURL}user/${userId}`,\n          {\n            firstname: firstName,\n            lastname: lastName,\n            phone: phone,\n            email: email,\n            country: country\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        .then((data) => {\n          console.log(data);\n          console.log(\"Auth user\", localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY));\n          let x = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n          x = JSON.parse(x);\n          console.log(x);\n          x.first_name = firstName;\n          x.last_name = lastName;\n\n          localStorage.setItem(\n            'authUser',\n            JSON.stringify(x)\n          );\n          console.log(\"hitting updateclientProfile\");\n          console.log(data);\n          this.setState({\n            updatedProfile: !this.state.updatedProfile\n          })\n          resolve(data);\n        })\n        .catch((e) => {\n          console.log(e);\n          reject(e);\n        });\n    })\n  }\n\n}\n\nexport { UserContainer };\n\n\n\n    // let user,copySessionData;\n    // console.log(\"check id \", this.state.userId);\n\n    // user = localStorage.getItem(LOCAL_STORAGE_SIGNIN_KEY);\n    // user = JSON.parse(user);\n    // copySessionData = ({}, this.state.sessionData);\n\n    // copySessionData.userId = user.id;\n    // this.setState({ sessionData: copySessionData });"]},"metadata":{},"sourceType":"module"}