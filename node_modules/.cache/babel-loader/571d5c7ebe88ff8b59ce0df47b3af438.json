{"ast":null,"code":"import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { reactI18nextModule } from \"react-i18next\";\nimport translationGr from './locales/gr/translation.json';\nimport translationIT from './locales/it/translation.json';\nimport translationRS from './locales/rs/translation.json';\nimport translationSP from './locales/sp/translation.json';\nimport translationENG from './locales/eng/translation.json'; // the translations\n\nconst resources = {\n  gr: {\n    translation: translationGr\n  },\n  it: {\n    translation: translationIT\n  },\n  rs: {\n    translation: translationRS\n  },\n  sp: {\n    translation: translationSP\n  },\n  eng: {\n    translation: translationENG\n  }\n};\ni18n.use(detector).use(reactI18nextModule) // passes i18n down to react-i18next\n.init({\n  resources,\n  lng: \"en\",\n  fallbackLng: \"en\",\n  // use en if detected lng is not available\n  keySeparator: false,\n  // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/Users/mac/writingPlatform/src/i18n.js"],"names":["i18n","detector","reactI18nextModule","translationGr","translationIT","translationRS","translationSP","translationENG","resources","gr","translation","it","rs","sp","eng","use","init","lng","fallbackLng","keySeparator","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAEA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,cAAP,MAA2B,gCAA3B,C,CAEA;;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE;AACFC,IAAAA,WAAW,EAAEP;AADX,GADY;AAIhBQ,EAAAA,EAAE,EAAE;AACFD,IAAAA,WAAW,EAAEN;AADX,GAJY;AAOfQ,EAAAA,EAAE,EAAE;AACHF,IAAAA,WAAW,EAAEL;AADV,GAPW;AAUfQ,EAAAA,EAAE,EAAE;AACHH,IAAAA,WAAW,EAAEJ;AADV,GAVW;AAafQ,EAAAA,GAAG,EAAE;AACJJ,IAAAA,WAAW,EAAEH;AADT;AAbU,CAAlB;AAkBAP,IAAI,CACDe,GADH,CACOd,QADP,EAEGc,GAFH,CAEOb,kBAFP,EAE2B;AAF3B,CAGGc,IAHH,CAGQ;AACJR,EAAAA,SADI;AAEJS,EAAAA,GAAG,EAAE,IAFD;AAGJC,EAAAA,WAAW,EAAE,IAHT;AAGe;AAEnBC,EAAAA,YAAY,EAAE,KALV;AAKiB;AAErBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACM;;AADN;AAPX,CAHR;AAeA,eAAerB,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { reactI18nextModule } from \"react-i18next\";\n\nimport translationGr from './locales/gr/translation.json';\nimport translationIT from './locales/it/translation.json';\nimport translationRS from './locales/rs/translation.json';\nimport translationSP from './locales/sp/translation.json';\nimport translationENG from './locales/eng/translation.json';\n\n// the translations\nconst resources = {\n  gr: {\n    translation: translationGr\n  },\n  it: {\n    translation: translationIT\n  },\n   rs: {\n    translation: translationRS\n  },\n   sp: {\n    translation: translationSP\n  },\n   eng: {\n    translation: translationENG\n  }\n};\n\ni18n\n  .use(detector)\n  .use(reactI18nextModule) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;"]},"metadata":{},"sourceType":"module"}