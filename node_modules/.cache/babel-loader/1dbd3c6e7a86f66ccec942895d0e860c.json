{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\nimport axios from \"axios\"; // Login Redux States\n\nimport { LOGIN_USER, LOGOUT_USER } from \"./actionTypes\";\nimport { loginSuccess, logoutUserSuccess, apiError } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeLogin, postJwtLogin, postUserLogin } from \"../../../helpers/fakebackend_helper\";\nconst fireBaseBackend = getFirebaseBackend();\n\nfunction* loginUser({\n  payload: {\n    user,\n    history\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.loginUser, user.email, user.password);\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, \"/post-jwt-login\", {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, \"/post-fake-login\", {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"test\") {\n      console.log(\"test\", user.email, user.password);\n      const response = yield call(postUserLogin, \"https://api.electrikrecharge.com/auth/login\", {\n        email: user.email,\n        password: user.password\n      });\n      console.log(response); // postUserLogin('http://api.electrikrecharge.com/auth/login', {email: user.email, password: user.password}).then((res)=>{\n      //     console.log(\"res\", res);\n      // })\n      // .catch((err)=>{\n      //     console.log(\"error\",err);\n      // })\n\n      console.log(\"check \", response);\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser({\n  payload: {\n    history\n  }\n}) {\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"test\") {// const response = yield call(fireBaseBackend.logout);\n      // yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(LOGIN_USER, loginUser);\n}\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* authSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["/Users/mac/metabank/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","axios","LOGIN_USER","LOGOUT_USER","loginSuccess","logoutUserSuccess","apiError","getFirebaseBackend","postFakeLogin","postJwtLogin","postUserLogin","fireBaseBackend","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","email","password","localStorage","setItem","JSON","stringify","console","log","push","error","logoutUser","removeItem","watchUserLogin","watchUserLogout","authSaga"],"mappings":"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","sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// Login Redux States\nimport { LOGIN_USER, LOGOUT_USER } from \"./actionTypes\";\nimport { loginSuccess, logoutUserSuccess, apiError } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport {\n  postFakeLogin,\n  postJwtLogin,\n  postUserLogin,\n} from \"../../../helpers/fakebackend_helper\";\n\nconst fireBaseBackend = getFirebaseBackend();\n\nfunction* loginUser({ payload: { user, history } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(\n        fireBaseBackend.loginUser,\n        user.email,\n        user.password\n      );\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, \"/post-jwt-login\", {\n        email: user.email,\n        password: user.password,\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, \"/post-fake-login\", {\n        email: user.email,\n        password: user.password,\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"test\") {\n        console.log(\"test\", user.email, user.password);\n      const response = yield call(\n        postUserLogin,\n        \"https://api.electrikrecharge.com/auth/login\",\n        { email: user.email, password: user.password }\n      );\n      console.log(response);\n      // postUserLogin('http://api.electrikrecharge.com/auth/login', {email: user.email, password: user.password}).then((res)=>{\n      //     console.log(\"res\", res);\n      // })\n      // .catch((err)=>{\n      //     console.log(\"error\",err);\n      // })\n      console.log(\"check \", response);\n    }\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser({ payload: { history } }) {\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"test\") {\n      // const response = yield call(fireBaseBackend.logout);\n      // yield put(logoutUserSuccess(response));\n    }\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(LOGIN_USER, loginUser);\n}\n\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* authSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}