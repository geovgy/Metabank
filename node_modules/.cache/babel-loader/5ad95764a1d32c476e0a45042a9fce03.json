{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport accessToken from \"../jwt-token-access/accessToken\";\nlet users = [{\n  uid: 1,\n  username: 'admin',\n  role: 'admin',\n  password: '123456',\n  email: 'admin@themesbrand.com'\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost('/post-fake-register').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost('/auth/login').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    console.log(user);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/fake-forget-pwd').reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost('/post-jwt-register').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost('/post-jwt-login').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          var token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/post-jwt-profile').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // Verify Jwt token from header.Authorization \n        if (finalToken === accessToken) {\n          if (validUser['length'] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.    \n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/post-fake-profile').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.    \n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          console.log(localStorage.getItem(\"authUser\"));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/jwt-forget-pwd').reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["/Users/mac/metabank/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","accessToken","users","uid","username","role","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","console","log","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport accessToken from \"../jwt-token-access/accessToken\";\n\nlet users = [\n  { uid: 1, username: 'admin', role : 'admin', password: '123456', email: 'admin@themesbrand.com' }\n];\n  \nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n\n  mock.onPost('/post-fake-register').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    users.push(user);\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost('/auth/login').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    console.log(user);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost('/fake-forget-pwd').reply(function (config) {\n   // User needs to check that user is eXist or not and send mail for Reset New password\n\n   return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n    });\n  });\n \n  });\n\n\n\n  mock.onPost('/post-jwt-register').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    users.push(user);\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost('/post-jwt-login').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          \n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          var token = accessToken;\n\n              // JWT AccessToken\n              const tokenObj = { accessToken : token };    // Token Obj\n              const validUserObj = { ...validUser[0], ...tokenObj };    // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n\n\nmock.onPost('/post-jwt-profile').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n    \n    const one  = config.headers;\n\n    let  finalToken = one.Authorization;\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise(function (resolve, reject) {\n    \n    setTimeout(function () {\n\n        // Verify Jwt token from header.Authorization \n    if(finalToken === accessToken)\n    {\n       if (validUser['length'] === 1) {\n\n              let objIndex;\n\n          //Find index of specific object using findIndex method.    \n          objIndex = users.findIndex((obj => obj.uid === user.idx));\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n           localStorage.removeItem(\"authUser\");\n           localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n                    \n          resolve([200, \"Profile Editted successfully\"]);\n\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n    }\n    else\n    {\n     reject([400, \"Invalid Token !!\"]);  \n    }\n      });\n    });\n  });\n\n\n\nmock.onPost('/post-fake-profile').reply(function (config) {\n\n    const user = JSON.parse(config['data']);\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n  \n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n\n        if (validUser['length'] === 1) {\n\n    \n          let objIndex;\n\n          //Find index of specific object using findIndex method.    \n          objIndex = users.findIndex((obj => obj.uid === user.idx));\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n           localStorage.removeItem(\"authUser\");\n           localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n                    \n          console.log(localStorage.getItem(\"authUser\"));\n\n          resolve([200, \"Profile Editted successfully\"]);\n\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n        \n      });\n    });\n  });\n\n\n  mock.onPost('/jwt-forget-pwd').reply(function (config) {\n   // User needs to check that user is eXist or not and send mail for Reset New password\n\n   return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n    });\n  });\n \n  });\n\n}\n\nexport default fakeBackend;"]},"metadata":{},"sourceType":"module"}